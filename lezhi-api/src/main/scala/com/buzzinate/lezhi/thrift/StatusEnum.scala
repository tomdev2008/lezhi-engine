/**
 * generated by Scrooge 3.0.9
 */
package com.buzzinate.lezhi.thrift

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-07-08T14:37:54.086+0800")
case object StatusEnum {
  
  case object Normal extends StatusEnum {
    val value = 0
    val name = "Normal"
  }
  
  case object Prior extends StatusEnum {
    val value = 1
    val name = "Prior"
  }
  
  case object Hidden extends StatusEnum {
    val value = 2
    val name = "Hidden"
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): StatusEnum = {
    value match {
      case 0 => Normal
      case 1 => Prior
      case 2 => Hidden
      case _ => throw new NoSuchElementException(value.toString)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): Option[StatusEnum] = {
    value match {
      case 0 => scala.Some(Normal)
      case 1 => scala.Some(Prior)
      case 2 => scala.Some(Hidden)
      case _ => scala.None
    }
  }

  def valueOf(name: String): Option[StatusEnum] = {
    name.toLowerCase match {
      case "normal" => scala.Some(StatusEnum.Normal)
      case "prior" => scala.Some(StatusEnum.Prior)
      case "hidden" => scala.Some(StatusEnum.Hidden)
      case _ => scala.None
    }
  }
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-07-08T14:37:54.086+0800")
sealed trait StatusEnum extends ThriftEnum with Serializable