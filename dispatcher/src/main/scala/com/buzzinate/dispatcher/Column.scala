/**
 * generated by Scrooge 3.0.9
 */
package com.buzzinate.dispatcher

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Column extends ThriftStructCodec[Column] {
  val Struct = new TStruct("Column")
  val RowField = new TField("row", TType.STRING, 1)
  val ColumnFamilyField = new TField("columnFamily", TType.STRING, 2)
  val NameField = new TField("name", TType.STRING, 3)
  val ValueField = new TField("value", TType.STRING, 4)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Column) {
    if (_item.row == null) throw new TProtocolException("Required field row cannot be null")
    if (_item.columnFamily == null) throw new TProtocolException("Required field columnFamily cannot be null")
    if (_item.name == null) throw new TProtocolException("Required field name cannot be null")
    if (_item.value == null) throw new TProtocolException("Required field value cannot be null")
  }

  def encode(_item: Column, _oproto: TProtocol) { _item.write(_oproto) }
  def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Column = decode(_iprot)

  def apply(
    row: String,
    columnFamily: String,
    name: String,
    value: String
  ): Column = new Immutable(
    row,
    columnFamily,
    name,
    value
  )

  def unapply(_item: Column): Option[Product4[String, String, String, String]] = Some(_item)

  object Immutable extends ThriftStructCodec[Column] {
    def encode(_item: Column, _oproto: TProtocol) { _item.write(_oproto) }
    def decode(_iprot: TProtocol) = {
      var row: String = null
      var _got_row = false
      var columnFamily: String = null
      var _got_columnFamily = false
      var name: String = null
      var _got_name = false
      var value: String = null
      var _got_value = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* row */
              _field.`type` match {
                case TType.STRING => {
                  row = {
                    _iprot.readString()
                  }
                  _got_row = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* columnFamily */
              _field.`type` match {
                case TType.STRING => {
                  columnFamily = {
                    _iprot.readString()
                  }
                  _got_columnFamily = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* name */
              _field.`type` match {
                case TType.STRING => {
                  name = {
                    _iprot.readString()
                  }
                  _got_name = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* value */
              _field.`type` match {
                case TType.STRING => {
                  value = {
                    _iprot.readString()
                  }
                  _got_value = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_row) throw new TProtocolException("Required field 'Column' was not found in serialized data for struct Column")
      if (!_got_columnFamily) throw new TProtocolException("Required field 'Column' was not found in serialized data for struct Column")
      if (!_got_name) throw new TProtocolException("Required field 'Column' was not found in serialized data for struct Column")
      if (!_got_value) throw new TProtocolException("Required field 'Column' was not found in serialized data for struct Column")
      new Immutable(
        row,
        columnFamily,
        name,
        value
      )
    }
  }

  /**
   * The default read-only implementation of Column.  You typically should not need to
   * directly reference this class; instead, use the Column.apply method to construct
   * new instances.
   */
  class Immutable(
    val row: String,
    val columnFamily: String,
    val name: String,
    val value: String
  ) extends Column

  /**
   * This Proxy trait allows you to extend the Column trait with additional state or
   * behavior and implement the read-only methods from Column using an underlying
   * instance.
   */
  trait Proxy extends Column {
    protected def _underlying_Column: Column
    def row: String = _underlying_Column.row
    def columnFamily: String = _underlying_Column.columnFamily
    def name: String = _underlying_Column.name
    def value: String = _underlying_Column.value
  }
}

trait Column extends ThriftStruct
  with Product4[String, String, String, String]
  with java.io.Serializable
{
  import Column._

  def row: String
  def columnFamily: String
  def name: String
  def value: String

  def _1 = row
  def _2 = columnFamily
  def _3 = name
  def _4 = value

  override def write(_oprot: TProtocol) {
    Column.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val row_item = row
      _oprot.writeFieldBegin(RowField)
      _oprot.writeString(row_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val columnFamily_item = columnFamily
      _oprot.writeFieldBegin(ColumnFamilyField)
      _oprot.writeString(columnFamily_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val name_item = name
      _oprot.writeFieldBegin(NameField)
      _oprot.writeString(name_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val value_item = value
      _oprot.writeFieldBegin(ValueField)
      _oprot.writeString(value_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    row: String = this.row, 
    columnFamily: String = this.columnFamily, 
    name: String = this.name, 
    value: String = this.value
  ): Column = new Immutable(
    row, 
    columnFamily, 
    name, 
    value
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Column]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => row
    case 1 => columnFamily
    case 2 => name
    case 3 => value
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Column"
}