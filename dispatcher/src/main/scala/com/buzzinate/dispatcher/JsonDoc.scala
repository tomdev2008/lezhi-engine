/**
 * generated by Scrooge 3.0.9
 */
package com.buzzinate.dispatcher

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object JsonDoc extends ThriftStructCodec[JsonDoc] {
  val Struct = new TStruct("JsonDoc")
  val IndexField = new TField("index", TType.STRING, 1)
  val TypoField = new TField("typo", TType.STRING, 2)
  val IdField = new TField("id", TType.STRING, 3)
  val JsonField = new TField("json", TType.STRING, 4)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: JsonDoc) {
    if (_item.index == null) throw new TProtocolException("Required field index cannot be null")
    if (_item.typo == null) throw new TProtocolException("Required field typo cannot be null")
    if (_item.id == null) throw new TProtocolException("Required field id cannot be null")
    if (_item.json == null) throw new TProtocolException("Required field json cannot be null")
  }

  def encode(_item: JsonDoc, _oproto: TProtocol) { _item.write(_oproto) }
  def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): JsonDoc = decode(_iprot)

  def apply(
    index: String,
    typo: String,
    id: String,
    json: String
  ): JsonDoc = new Immutable(
    index,
    typo,
    id,
    json
  )

  def unapply(_item: JsonDoc): Option[Product4[String, String, String, String]] = Some(_item)

  object Immutable extends ThriftStructCodec[JsonDoc] {
    def encode(_item: JsonDoc, _oproto: TProtocol) { _item.write(_oproto) }
    def decode(_iprot: TProtocol) = {
      var index: String = null
      var _got_index = false
      var typo: String = null
      var _got_typo = false
      var id: String = null
      var _got_id = false
      var json: String = null
      var _got_json = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* index */
              _field.`type` match {
                case TType.STRING => {
                  index = {
                    _iprot.readString()
                  }
                  _got_index = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* typo */
              _field.`type` match {
                case TType.STRING => {
                  typo = {
                    _iprot.readString()
                  }
                  _got_typo = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* id */
              _field.`type` match {
                case TType.STRING => {
                  id = {
                    _iprot.readString()
                  }
                  _got_id = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* json */
              _field.`type` match {
                case TType.STRING => {
                  json = {
                    _iprot.readString()
                  }
                  _got_json = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_index) throw new TProtocolException("Required field 'JsonDoc' was not found in serialized data for struct JsonDoc")
      if (!_got_typo) throw new TProtocolException("Required field 'JsonDoc' was not found in serialized data for struct JsonDoc")
      if (!_got_id) throw new TProtocolException("Required field 'JsonDoc' was not found in serialized data for struct JsonDoc")
      if (!_got_json) throw new TProtocolException("Required field 'JsonDoc' was not found in serialized data for struct JsonDoc")
      new Immutable(
        index,
        typo,
        id,
        json
      )
    }
  }

  /**
   * The default read-only implementation of JsonDoc.  You typically should not need to
   * directly reference this class; instead, use the JsonDoc.apply method to construct
   * new instances.
   */
  class Immutable(
    val index: String,
    val typo: String,
    val id: String,
    val json: String
  ) extends JsonDoc

  /**
   * This Proxy trait allows you to extend the JsonDoc trait with additional state or
   * behavior and implement the read-only methods from JsonDoc using an underlying
   * instance.
   */
  trait Proxy extends JsonDoc {
    protected def _underlying_JsonDoc: JsonDoc
    def index: String = _underlying_JsonDoc.index
    def typo: String = _underlying_JsonDoc.typo
    def id: String = _underlying_JsonDoc.id
    def json: String = _underlying_JsonDoc.json
  }
}

trait JsonDoc extends ThriftStruct
  with Product4[String, String, String, String]
  with java.io.Serializable
{
  import JsonDoc._

  def index: String
  def typo: String
  def id: String
  def json: String

  def _1 = index
  def _2 = typo
  def _3 = id
  def _4 = json

  override def write(_oprot: TProtocol) {
    JsonDoc.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val index_item = index
      _oprot.writeFieldBegin(IndexField)
      _oprot.writeString(index_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val typo_item = typo
      _oprot.writeFieldBegin(TypoField)
      _oprot.writeString(typo_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val id_item = id
      _oprot.writeFieldBegin(IdField)
      _oprot.writeString(id_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val json_item = json
      _oprot.writeFieldBegin(JsonField)
      _oprot.writeString(json_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    index: String = this.index, 
    typo: String = this.typo, 
    id: String = this.id, 
    json: String = this.json
  ): JsonDoc = new Immutable(
    index, 
    typo, 
    id, 
    json
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[JsonDoc]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => index
    case 1 => typo
    case 2 => id
    case 3 => json
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "JsonDoc"
}