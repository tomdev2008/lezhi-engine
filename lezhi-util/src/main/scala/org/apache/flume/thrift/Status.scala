/**
 * generated by Scrooge 3.0.9
 */
package org.apache.flume.thrift

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-03-30T18:01:58.411+0800")
case object Status {
  
  case object Ok extends Status {
    val value = 0
    val name = "Ok"
  }
  
  case object Failed extends Status {
    val value = 1
    val name = "Failed"
  }
  
  case object Error extends Status {
    val value = 2
    val name = "Error"
  }
  
  case object Unknown extends Status {
    val value = 3
    val name = "Unknown"
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): Status = {
    value match {
      case 0 => Ok
      case 1 => Failed
      case 2 => Error
      case 3 => Unknown
      case _ => throw new NoSuchElementException(value.toString)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): Option[Status] = {
    value match {
      case 0 => scala.Some(Ok)
      case 1 => scala.Some(Failed)
      case 2 => scala.Some(Error)
      case 3 => scala.Some(Unknown)
      case _ => scala.None
    }
  }

  def valueOf(name: String): Option[Status] = {
    name.toLowerCase match {
      case "ok" => scala.Some(Status.Ok)
      case "failed" => scala.Some(Status.Failed)
      case "error" => scala.Some(Status.Error)
      case "unknown" => scala.Some(Status.Unknown)
      case _ => scala.None
    }
  }
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2013-03-30T18:01:58.411+0800")
sealed trait Status extends ThriftEnum with Serializable