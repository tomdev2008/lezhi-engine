/**
 * generated by Scrooge 3.0.9
 */
package org.apache.flume.thrift

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object ThriftFlumeEvent extends ThriftStructCodec[ThriftFlumeEvent] {
  val Struct = new TStruct("ThriftFlumeEvent")
  val HeadersField = new TField("headers", TType.MAP, 1)
  val BodyField = new TField("body", TType.STRING, 2)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ThriftFlumeEvent) {
    if (_item.headers == null) throw new TProtocolException("Required field headers cannot be null")
    if (_item.body == null) throw new TProtocolException("Required field body cannot be null")
  }

  def encode(_item: ThriftFlumeEvent, _oproto: TProtocol) { _item.write(_oproto) }
  def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): ThriftFlumeEvent = decode(_iprot)

  def apply(
    headers: Map[String, String] = Map[String, String](),
    body: ByteBuffer
  ): ThriftFlumeEvent = new Immutable(
    headers,
    body
  )

  def unapply(_item: ThriftFlumeEvent): Option[Product2[Map[String, String], ByteBuffer]] = Some(_item)

  object Immutable extends ThriftStructCodec[ThriftFlumeEvent] {
    def encode(_item: ThriftFlumeEvent, _oproto: TProtocol) { _item.write(_oproto) }
    def decode(_iprot: TProtocol) = {
      var headers: Map[String, String] = Map[String, String]()
      var _got_headers = false
      var body: ByteBuffer = null
      var _got_body = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* headers */
              _field.`type` match {
                case TType.MAP => {
                  headers = {
                    val _map = _iprot.readMapBegin()
                    val _rv = new mutable.HashMap[String, String]
                    var _i = 0
                    while (_i < _map.size) {
                      val _key = {
                        _iprot.readString()
                      }
                      val _value = {
                        _iprot.readString()
                      }
                      _rv(_key) = _value
                      _i += 1
                    }
                    _iprot.readMapEnd()
                    _rv
                  }
                  _got_headers = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* body */
              _field.`type` match {
                case TType.STRING => {
                  body = {
                    _iprot.readBinary()
                  }
                  _got_body = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_headers) throw new TProtocolException("Required field 'ThriftFlumeEvent' was not found in serialized data for struct ThriftFlumeEvent")
      if (!_got_body) throw new TProtocolException("Required field 'ThriftFlumeEvent' was not found in serialized data for struct ThriftFlumeEvent")
      new Immutable(
        headers,
        body
      )
    }
  }

  /**
   * The default read-only implementation of ThriftFlumeEvent.  You typically should not need to
   * directly reference this class; instead, use the ThriftFlumeEvent.apply method to construct
   * new instances.
   */
  class Immutable(
    val headers: Map[String, String] = Map[String, String](),
    val body: ByteBuffer
  ) extends ThriftFlumeEvent

  /**
   * This Proxy trait allows you to extend the ThriftFlumeEvent trait with additional state or
   * behavior and implement the read-only methods from ThriftFlumeEvent using an underlying
   * instance.
   */
  trait Proxy extends ThriftFlumeEvent {
    protected def _underlying_ThriftFlumeEvent: ThriftFlumeEvent
    def headers: Map[String, String] = _underlying_ThriftFlumeEvent.headers
    def body: ByteBuffer = _underlying_ThriftFlumeEvent.body
  }
}

trait ThriftFlumeEvent extends ThriftStruct
  with Product2[Map[String, String], ByteBuffer]
  with java.io.Serializable
{
  import ThriftFlumeEvent._

  def headers: Map[String, String]
  def body: ByteBuffer

  def _1 = headers
  def _2 = body

  override def write(_oprot: TProtocol) {
    ThriftFlumeEvent.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val headers_item = headers
      _oprot.writeFieldBegin(HeadersField)
      _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, headers_item.size))
      headers_item.foreach { _pair =>
        val headers_item_key = _pair._1
        val headers_item_value = _pair._2
        _oprot.writeString(headers_item_key)
        _oprot.writeString(headers_item_value)
      }
      _oprot.writeMapEnd()
      _oprot.writeFieldEnd()
    }
    if (true) {
      val body_item = body
      _oprot.writeFieldBegin(BodyField)
      _oprot.writeBinary(body_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    headers: Map[String, String] = this.headers, 
    body: ByteBuffer = this.body
  ): ThriftFlumeEvent = new Immutable(
    headers, 
    body
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ThriftFlumeEvent]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => headers
    case 1 => body
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ThriftFlumeEvent"
}