/**
 * generated by Scrooge 3.0.7
 */
package com.buzzinate.thrift.frontier

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Item extends ThriftStructCodec[Item] {
  val Struct = new TStruct("Item")
  val IdField = new TField("id", TType.STRING, 1)
  val DataField = new TField("data", TType.STRING, 2)
  val QueueField = new TField("queue", TType.STRING, 3)
  val CheckIntervalField = new TField("checkInterval", TType.I32, 4)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Item) {
    if (_item.id == null) throw new TProtocolException("Required field id cannot be null")
    if (_item.data == null) throw new TProtocolException("Required field data cannot be null")
    if (_item.queue == null) throw new TProtocolException("Required field queue cannot be null")
  }

  def encode(_item: Item, _oproto: TProtocol) { _item.write(_oproto) }
  def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Item = decode(_iprot)

  def apply(
    id: String,
    data: String,
    queue: String,
    checkInterval: Option[Int] = None
  ): Item = new Immutable(
    id,
    data,
    queue,
    checkInterval
  )

  def unapply(_item: Item): Option[Product4[String, String, String, Option[Int]]] = Some(_item)

  object Immutable extends ThriftStructCodec[Item] {
    def encode(_item: Item, _oproto: TProtocol) { _item.write(_oproto) }
    def decode(_iprot: TProtocol) = {
      var id: String = null
      var _got_id = false
      var data: String = null
      var _got_data = false
      var queue: String = null
      var _got_queue = false
      var checkInterval: Int = 0
      var _got_checkInterval = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* id */
              _field.`type` match {
                case TType.STRING => {
                  id = {
                    _iprot.readString()
                  }
                  _got_id = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* data */
              _field.`type` match {
                case TType.STRING => {
                  data = {
                    _iprot.readString()
                  }
                  _got_data = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* queue */
              _field.`type` match {
                case TType.STRING => {
                  queue = {
                    _iprot.readString()
                  }
                  _got_queue = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 4 => { /* checkInterval */
              _field.`type` match {
                case TType.I32 => {
                  checkInterval = {
                    _iprot.readI32()
                  }
                  _got_checkInterval = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      if (!_got_id) throw new TProtocolException("Required field 'Item' was not found in serialized data for struct Item")
      if (!_got_data) throw new TProtocolException("Required field 'Item' was not found in serialized data for struct Item")
      if (!_got_queue) throw new TProtocolException("Required field 'Item' was not found in serialized data for struct Item")
      new Immutable(
        id,
        data,
        queue,
        if (_got_checkInterval) Some(checkInterval) else None
      )
    }
  }

  /**
   * The default read-only implementation of Item.  You typically should not need to
   * directly reference this class; instead, use the Item.apply method to construct
   * new instances.
   */
  class Immutable(
    val id: String,
    val data: String,
    val queue: String,
    val checkInterval: Option[Int] = None
  ) extends Item

  /**
   * This Proxy trait allows you to extend the Item trait with additional state or
   * behavior and implement the read-only methods from Item using an underlying
   * instance.
   */
  trait Proxy extends Item {
    protected def _underlying_Item: Item
    def id: String = _underlying_Item.id
    def data: String = _underlying_Item.data
    def queue: String = _underlying_Item.queue
    def checkInterval: Option[Int] = _underlying_Item.checkInterval
  }
}

trait Item extends ThriftStruct
  with Product4[String, String, String, Option[Int]]
  with java.io.Serializable
{
  import Item._

  def id: String
  def data: String
  def queue: String
  def checkInterval: Option[Int]

  def _1 = id
  def _2 = data
  def _3 = queue
  def _4 = checkInterval

  override def write(_oprot: TProtocol) {
    Item.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val id_item = id
      _oprot.writeFieldBegin(IdField)
      _oprot.writeString(id_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val data_item = data
      _oprot.writeFieldBegin(DataField)
      _oprot.writeString(data_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val queue_item = queue
      _oprot.writeFieldBegin(QueueField)
      _oprot.writeString(queue_item)
      _oprot.writeFieldEnd()
    }
    if (checkInterval.isDefined) {
      val checkInterval_item = checkInterval.get
      _oprot.writeFieldBegin(CheckIntervalField)
      _oprot.writeI32(checkInterval_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: String = this.id, 
    data: String = this.data, 
    queue: String = this.queue, 
    checkInterval: Option[Int] = this.checkInterval
  ): Item = new Immutable(
    id, 
    data, 
    queue, 
    checkInterval
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Item]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => id
    case 1 => data
    case 2 => queue
    case 3 => checkInterval
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Item"
}